local busted = require("busted")

describe("list module", function()
  local list

  before_each(function()
    _G.G_RLF = {}
    dofile("DoubleLinkedList.lua")
    list = _G.G_RLF.list
  end)

  describe("push method", function()
    it("should add an element to the end of the list", function()
      local l = list()
      l:push({ value = 1 })
      assert.are.equal(l.length, 1)
      assert.are.equal(l.first.value, 1)
      assert.are.equal(l.last.value, 1)
    end)

    it("should link elements correctly", function()
      local l = list()
      l:push({ value = 1 })
      l:push({ value = 2 })
      assert.are.equal(l.length, 2)
      assert.are.equal(l.first.value, 1)
      assert.are.equal(l.last.value, 2)
      assert.are.equal(l.first._next.value, 2)
      assert.are.equal(l.last._prev.value, 1)
    end)
  end)

  describe("unshift method", function()
    it("should add an element to the start of the list", function()
      local l = list()
      l:unshift({ value = 1 })
      assert.are.equal(l.length, 1)
      assert.are.equal(l.first.value, 1)
      assert.are.equal(l.last.value, 1)
    end)

    it("should link elements correctly", function()
      local l = list()
      l:unshift({ value = 1 })
      l:unshift({ value = 2 })
      assert.are.equal(l.length, 2)
      assert.are.equal(l.first.value, 2)
      assert.are.equal(l.last.value, 1)
      assert.are.equal(l.first._next.value, 1)
      assert.are.equal(l.last._prev.value, 2)
    end)
  end)

  describe("pop method", function()
    it("should remove and return the last element of the list", function()
      local l = list()
      l:push({ value = 1 })
      l:push({ value = 2 })
      local last = l:pop()
      assert.are.equal(last.value, 2)
      assert.are.equal(l.length, 1)
      assert.are.equal(l.last.value, 1)
      assert.are.equal(l.first.value, 1)
    end)
  end)

  describe("shift method", function()
    it("should remove and return the first element of the list", function()
      local l = list()
      l:push({ value = 1 })
      l:push({ value = 2 })
      local first = l:shift()
      assert.are.equal(first.value, 1)
      assert.are.equal(l.length, 1)
      assert.are.equal(l.first.value, 2)
      assert.are.equal(l.last.value, 2)
    end)
  end)

  describe("insert method", function()
    it("should insert an element after a given element", function()
      local l = list()
      local first = { value = 1 }
      local second = { value = 2 }
      local new_elem = { value = 3 }
      l:push(first)
      l:push(second)
      l:insert(new_elem, first)
      assert.are.equal(l.length, 3)
      assert.are.equal(l.first.value, 1)
      assert.are.equal(l.first._next.value, 3)
      assert.are.equal(l.first._next._next.value, 2)
    end)
  end)

  describe("remove method", function()
    it("should remove a specific element from the list", function()
      local l = list()
      local first = { value = 1 }
      local second = { value = 2 }
      l:push(first)
      l:push(second)
      l:remove(first)
      assert.are.equal(l.length, 1)
      assert.are.equal(l.first.value, 2)
      assert.are.equal(l.last.value, 2)
    end)
  end)

  describe("iterate method", function()
    it("should iterate over all elements in the list", function()
      local l = list()
      l:push({ value = 1 })
      l:push({ value = 2 })
      l:push({ value = 3 })
      local values = {}
      for node in l:iterate() do
        table.insert(values, node.value)
      end
      assert.are.same(values, { 1, 2, 3 })
    end)
  end)
end)
